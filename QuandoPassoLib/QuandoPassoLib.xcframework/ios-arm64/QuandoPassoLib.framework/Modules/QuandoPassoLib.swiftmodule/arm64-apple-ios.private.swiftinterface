// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QuandoPassoLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Alamofire
import CoreLocation
import CoreMotion
import Darwin
import Foundation
import Swift
import UserNotifications
import _Concurrency
import _StringProcessing
public protocol QPEvent {
  var description: Swift.String { get }
  var secondaryDescription: Swift.String? { get }
}
public struct QPEngineStarted : QuandoPassoLib.QPEvent {
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPEngineStopped : QuandoPassoLib.QPEvent {
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPConnectivityChangedEvent : QuandoPassoLib.QPEvent {
  public let connected: Swift.Bool
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPLocationUpdatedEvent : QuandoPassoLib.QPEvent {
  public let currentLocation: CoreLocation.CLLocation
  public let currentBearing: Swift.Double
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPEnteredVSignEvent : QuandoPassoLib.QPEvent {
  public let signal: QuandoPassoLib.QPSignal
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPNotifiedVSignEvent : QuandoPassoLib.QPEvent {
  public let signal: QuandoPassoLib.QPSignal
  public let datetime: Foundation.Date
  public let currentLocation: CoreLocation.CLLocation
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPVSignsFetchedEvent : QuandoPassoLib.QPEvent {
  public let signals: [QuandoPassoLib.QPSignal]
  public let newSignals: [QuandoPassoLib.QPSignal]
  public let atCoordinates: CoreLocation.CLLocationCoordinate2D
  public let forced: Swift.Bool
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPExitedApiCoverageRegionEvent : QuandoPassoLib.QPEvent {
  public let region: CoreLocation.CLCircularRegion
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPResetVSignStatus : QuandoPassoLib.QPEvent {
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPGPSUpdatesPaused : QuandoPassoLib.QPEvent {
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPUserActivityChangedEvent : QuandoPassoLib.QPEvent {
  public let activity: CoreMotion.CMMotionActivity
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPEngineAutoActivated : QuandoPassoLib.QPEvent {
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPEngineAutoDeactivated : QuandoPassoLib.QPEvent {
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPEngineAutoDeactivatedLongTerm : QuandoPassoLib.QPEvent {
  public var description: Swift.String {
    get
  }
  public var secondaryDescription: Swift.String? {
    get
  }
}
public struct QPSignalAction : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public typealias VSignScanResults = (entered: [QuandoPassoLib.QPSignal], matched: [QuandoPassoLib.QPSignal], others: [QuandoPassoLib.QPSignal])
public struct QPBearing : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct QPPoint : Swift.Codable {
  public let lat: Swift.Double?
  public let lng: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct QPReactivateTimeout : Swift.Decodable {
  public let timeout: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
}
public class MetricsManager {
  public var timeInterval: Swift.Int {
    get
    set(val)
  }
  public var connectedToNetwork: Swift.Bool {
    get
    set(val)
  }
  public init(engine: QuandoPassoLib.QPEngine, timeInterval: Swift.Int)
  @objc deinit
}
public enum QPEngineStatus : Swift.String, Swift.CaseIterable {
  case stopped
  case suspendedShortTerm
  case suspendedLongTerm
  case running
  public init?(rawValue: Swift.String)
  public typealias AllCases = [QuandoPassoLib.QPEngineStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [QuandoPassoLib.QPEngineStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public class QPEngine : ObjectiveC.NSObject {
  public static var deviceID: Swift.String {
    get
  }
  public var settings: QuandoPassoLib.QPSettings
  public var locationManager: CoreLocation.CLLocationManager!
  public var latestDetectedActivity: CoreMotion.CMMotionActivity?
  public var engineStatus: QuandoPassoLib.QPEngineStatus
  public var latestKnownLocation: CoreLocation.CLLocation? {
    get
  }
  weak public var delegate: QuandoPassoLib.QPManagerDelegate?
  public var metricsManager: QuandoPassoLib.MetricsManager!
  public init(settings: QuandoPassoLib.QPSettings)
  @objc deinit
  public func speak(text: Swift.String, language: QuandoPassoLib.QPLangCode?, useIterationSettings: Swift.Bool? = false)
}
extension QuandoPassoLib.QPEngine {
  public func start()
  public func stop()
  public func checkAndSwitchSuspendedState()
  public func suspendShortTerm()
  public func suspendLongTerm()
  public func reactivate()
  public func askPermission()
  public func getPermissions(completion: @escaping ([QuandoPassoLib.QPPermission]) -> ())
  public func fetchSignals(near: CoreLocation.CLLocationCoordinate2D, completed: (() -> Swift.Void)? = nil)
  public func forceFetchSignals()
  public func forceVSignScan()
  public func resetSignalsNotificationStatus()
}
extension QuandoPassoLib.QPEngine : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didExitRegion region: CoreLocation.CLRegion)
  @objc dynamic public func locationManagerDidPauseLocationUpdates(_ manager: CoreLocation.CLLocationManager)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
extension QuandoPassoLib.QPEngine : UserNotifications.UNUserNotificationCenterDelegate {
  @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
}
extension QuandoPassoLib.QPEngine {
  public static func trackAnalyticsEvent(_ type: Swift.String, props: [Swift.String : Swift.String] = [:])
  public static var version: Swift.String {
    get
  }
  public static func trackAppOpened()
  public static func trackAppBecameActive()
  public static func trackAppInBackground()
  public static func trackAppTerminated()
}
extension QuandoPassoLib.QPEngine : AVFAudio.AVSpeechSynthesizerDelegate {
  @objc dynamic public func speechSynthesizer(_ synthesizer: AVFAudio.AVSpeechSynthesizer, didFinish utterance: AVFAudio.AVSpeechUtterance)
}
public protocol QPManagerDelegate : AnyObject {
  func didReceive(event: QuandoPassoLib.QPEvent)
}
public struct QPSignalMessage : Swift.Decodable {
  public let text: Swift.String
  public let lang: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct QPPermission {
  public let type: QuandoPassoLib.QPPermissionType
  public let granted: Swift.Bool
}
public enum QPPermissionType : Swift.CaseIterable {
  case location
  case preciseLocation
  case pushNotification
  case motionAndFitness
  public func debugDescription() -> Swift.String
  public static func == (a: QuandoPassoLib.QPPermissionType, b: QuandoPassoLib.QPPermissionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [QuandoPassoLib.QPPermissionType]
  public static var allCases: [QuandoPassoLib.QPPermissionType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public class QPSignal : Swift.Decodable {
  public var region: QuandoPassoLib.QPCodableCircularRegion? {
    get
    set
  }
  final public let id: Swift.String
  public var bearings: [QuandoPassoLib.QPBearing]?
  public var messages: [QuandoPassoLib.QPSignalMessage]?
  public var entered: Swift.Bool?
  public var notified: Swift.Bool?
  final public let point: QuandoPassoLib.QPPoint?
  final public let radius: Swift.Int?
  public var lastEnteredAt: Foundation.Date?
  public var lastNotifiedAt: Foundation.Date?
  public var mainBearing: Swift.Double? {
    get
  }
  public var hasBearings: Swift.Bool {
    get
  }
  public var notificationAgeInSeconds: Swift.Int {
    get
  }
  public var enteredAgeInSeconds: Swift.Int {
    get
  }
  public var reactivate: QuandoPassoLib.QPReactivateTimeout?
  public var action: QuandoPassoLib.QPSignalAction?
  public func getMessage(byLang: QuandoPassoLib.QPLangCode, fallbackLang: QuandoPassoLib.QPLangCode?) -> QuandoPassoLib.QPSignalMessage?
  public func markAsNotified()
  public func resetNotified()
  public func markAsEntered()
  public func resetEntered()
  public func resetStatus()
  public func updateFrom(otherSignal: QuandoPassoLib.QPSignal)
  public func distanceFromCenter(point: CoreLocation.CLLocation) -> CoreLocation.CLLocationDistance?
  public func distanceFromArea(point: CoreLocation.CLLocation) -> CoreLocation.CLLocationDistance?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
extension CoreLocation.CLLocationCoordinate2D {
  public func toReadableString() -> Swift.String
}
extension Foundation.Bundle {
  public var releaseVersionNumber: Swift.String? {
    get
  }
  public var buildVersionNumber: Swift.String? {
    get
  }
}
public struct QPCodableCircularRegion : Swift.Codable {
  public var region: CoreLocation.CLCircularRegion?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public init(_ region: CoreLocation.CLCircularRegion)
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct QPActionParams : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct QPSignalsResponse : Swift.Decodable {
  public let vsigns: [QuandoPassoLib.QPSignal]?
  public init(from decoder: Swift.Decoder) throws
}
public enum QPLangCode : Swift.String, Swift.CaseIterable {
  case it
  case gb
  case fr
  case de
  public init?(rawValue: Swift.String)
  public typealias AllCases = [QuandoPassoLib.QPLangCode]
  public typealias RawValue = Swift.String
  public static var allCases: [QuandoPassoLib.QPLangCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum QPApiDomain : Swift.String, Swift.CaseIterable {
  case quandopasso
  case viasuisse
  case aecom
  public init?(rawValue: Swift.String)
  public typealias AllCases = [QuandoPassoLib.QPApiDomain]
  public typealias RawValue = Swift.String
  public static var allCases: [QuandoPassoLib.QPApiDomain] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum UserActivityType : Swift.String, Swift.CaseIterable {
  case in_vehicle
  case still
  case walking
  public init?(rawValue: Swift.String)
  public typealias AllCases = [QuandoPassoLib.UserActivityType]
  public typealias RawValue = Swift.String
  public static var allCases: [QuandoPassoLib.UserActivityType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum UserActivityTransition : Swift.String, Swift.CaseIterable {
  case enter
  case exit
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [QuandoPassoLib.UserActivityTransition]
  public typealias RawValue = Swift.String
  public static var allCases: [QuandoPassoLib.UserActivityTransition] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct UserActivityDetectedMessage {
  public var type: QuandoPassoLib.UserActivityType
  public var transition: QuandoPassoLib.UserActivityTransition
}
public class QPSettings {
  public var buildNumber: Swift.Int
  public var enableTextToSpeech: Swift.Bool
  public var apiBaseUrl: Swift.String
  public var terminalsApiBaseUrl: Swift.String
  public var apiDomain: QuandoPassoLib.QPApiDomain
  public var apiPollInterval: Swift.Int
  public var apiCoverageRadius: Swift.Int
  public var bearingToleranceDegrees: Swift.Int
  public var enableBearingChecks: Swift.Bool
  public var gpsLocationMaxAgeSeconds: Swift.Int
  public var gpsLocationMinHorizontalAccuracy: Swift.Int
  public var notifiedTimeoutSeconds: Swift.Int
  public var notifiedMinDistanceInMeters: Swift.Double
  public var ttsVolume: Swift.Float
  public var ttsIterations: Swift.Int
  public var ttsIterationDelay: Swift.Double
  public var playJingleBeforeTTS: Swift.Bool
  public var timeIntervalBetweenJingleAndTts: Swift.Double
  public var jingleURL: Foundation.URL? {
    get
  }
  public var cacheJingle: Swift.Bool {
    get
  }
  public var hostAppBundleId: Swift.String? {
    get
  }
  public var language: QuandoPassoLib.QPLangCode?
  public var enableOnActivity: Swift.String
  public var activityDetectionUpdateInterval: Swift.Double
  public var activityTransitionMessages: [QuandoPassoLib.UserActivityDetectedMessage]
  public var ttsActionFallbackLanguage: QuandoPassoLib.QPLangCode
  public var enableUpdatesOnActivityDetection: Swift.Bool
  public var syncMetricsInterval: Swift.Int {
    get
    set
  }
  public var gpsDefaultAccuracy: CoreLocation.CLLocationAccuracy {
    get
    set
  }
  public var suspendedGpsDefaultAccuracy: CoreLocation.CLLocationAccuracy
  public var suspendedLongTermGpsDefaultAccuracy: CoreLocation.CLLocationAccuracy
  public var gpsPausesLocationUpdatesAutomatically: Swift.Bool {
    get
    set
  }
  public var gpsDistanceFilter: Swift.Int {
    get
    set
  }
  public var suspendLongTermAfterSeconds: Swift.Int
  public var suspendedGpsDistanceFilter: Swift.Int
  public var suspendedLongTermGpsDistanceFilter: Swift.Int
  public var activationNotificationText: Swift.String
  public var deactivationNotificationText: Swift.String
  public var enableOnActivities: [QuandoPassoLib.UserActivityType]
  required public init?(from dictionary: [Swift.String : Any])
  public func toJSONObject() -> [Swift.String : Any?]?
  public var engine: QuandoPassoLib.QPEngine?
  public init()
  public init(apiBaseUrl: Swift.String)
  public func saveToUserDefaults()
  public static func restoreFromUserDefaults() -> QuandoPassoLib.QPSettings
  public func setJingle(url: Foundation.URL, bundleIdentifier: Swift.String? = nil, cacheFile: Swift.Bool = false)
  public func clearCachedJingle()
  @objc deinit
}
extension QuandoPassoLib.QPEngineStatus : Swift.Equatable {}
extension QuandoPassoLib.QPEngineStatus : Swift.Hashable {}
extension QuandoPassoLib.QPEngineStatus : Swift.RawRepresentable {}
extension QuandoPassoLib.QPPermissionType : Swift.Equatable {}
extension QuandoPassoLib.QPPermissionType : Swift.Hashable {}
extension QuandoPassoLib.QPLangCode : Swift.Equatable {}
extension QuandoPassoLib.QPLangCode : Swift.Hashable {}
extension QuandoPassoLib.QPLangCode : Swift.RawRepresentable {}
extension QuandoPassoLib.QPApiDomain : Swift.Equatable {}
extension QuandoPassoLib.QPApiDomain : Swift.Hashable {}
extension QuandoPassoLib.QPApiDomain : Swift.RawRepresentable {}
extension QuandoPassoLib.UserActivityType : Swift.Equatable {}
extension QuandoPassoLib.UserActivityType : Swift.Hashable {}
extension QuandoPassoLib.UserActivityType : Swift.RawRepresentable {}
extension QuandoPassoLib.UserActivityTransition : Swift.Equatable {}
extension QuandoPassoLib.UserActivityTransition : Swift.Hashable {}
extension QuandoPassoLib.UserActivityTransition : Swift.RawRepresentable {}
